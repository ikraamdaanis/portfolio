---
import { Image } from "astro:assets";
import Bun from "components/icons/bun.astro";
import Firebase from "components/icons/firebase.astro";
import Nextjs from "components/icons/nextjs.astro";
import Postgres from "components/icons/postgres.astro";
import Prisma from "components/icons/prisma.astro";
import ReactQuery from "components/icons/react-query.astro";
import ReactRouter from "components/icons/react-router.astro";
import React from "components/icons/react.astro";
import Redux from "components/icons/redux.astro";
import Tailwind from "components/icons/tailwind.astro";
import Zustand from "components/icons/zustand.astro";
import type { Project } from "data/projects-data";

type Props = {
  project: Project;
  isFirst?: boolean;
};

const { project, isFirst = false } = Astro.props;
const {
  title,
  description1,
  description2,
  list1,
  list2,
  repo,
  website,
  image1
} = project;

const iconComponents = {
  zustand: {
    icon: Zustand,
    class: "size-[15px]"
  },
  nextjs: {
    icon: Nextjs,
    class: "size-4 translate-y-0.5"
  },
  "react-query": {
    icon: ReactQuery,
    class: "size-4"
  },
  firebase: {
    icon: Firebase,
    class: "size-4"
  },
  "react-router": {
    icon: ReactRouter,
    class: "size-4"
  },
  react: {
    icon: React,
    class: "size-4"
  },
  postgres: {
    icon: Postgres,
    class: "size-4"
  },
  prisma: {
    icon: Prisma,
    class: "size-3.5 fill-white"
  },
  bun: {
    icon: Bun,
    class: "size-4"
  },
  tailwind: {
    icon: Tailwind,
    class: "size-4"
  },
  redux: {
    icon: Redux,
    class: "size-4"
  }
};
---

<article>
  <h3 class="text-xl">{title}</h3>
  <div class="relative mt-2 mb-4 aspect-[16/10] overflow-hidden rounded-[2px]">
    <Image
      src={image1}
      alt={`${title} screenshot 1`}
      width={1280}
      height={800}
      widths={[320, 640, 960, 1280]}
      sizes="(max-width: 640px) 100vw, 640px"
      class="relative z-10 h-full w-full object-cover"
      loading={isFirst ? "eager" : "lazy"}
      fetchpriority={isFirst ? "high" : undefined}
      decoding="sync"
    />
  </div>
  <p class="text-text-size mb-3">{description1}</p>
  <p class="text-text-size mb-3">{description2}</p>
  <ul class="mb-3 flex flex-wrap gap-2">
    {
      [...list1, ...list2].map(tech => (
        <li
          class="flex items-center gap-1.5 rounded-md px-2 py-1 text-sm"
          style={`background-color: ${tech.bg}; color: ${tech.text}`}
        >
          {tech.icon && (
            <span class="flex items-center justify-center" aria-hidden="true">
              {typeof tech.icon === "string"
                ? (() => {
                    const IconComponent =
                      iconComponents[tech.icon as keyof typeof iconComponents];

                    return IconComponent ? (
                      <IconComponent.icon
                        class={IconComponent.class}
                        style={`color: ${tech.iconColor}`}
                      />
                    ) : (
                      "ðŸ’…"
                    );
                  })()
                : null}
            </span>
          )}
          {tech.name}
        </li>
      ))
    }
  </ul>
  <div class="flex gap-4 text-sm">
    <a
      href={repo}
      rel="noreferrer"
      target="_blank"
      aria-label={`View ${title} source code on GitHub`}
      class="underline hover:opacity-80 transition-opacity"
    >
      GitHub
    </a>
    {
      website && (
        <a
          href={website}
          rel="noreferrer"
          target="_blank"
          aria-label={`View ${title} live demo`}
          class="underline hover:opacity-80 transition-opacity"
        >
          Live Demo
        </a>
      )
    }
  </div>
</article>
